"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const constants_1 = require("../utils/constants");
const ProviderSchema = new mongoose_1.Schema(Object.assign({ tempEmpanelmentId: { type: mongoose_1.Schema.Types.ObjectId, ref: constants_1.COLLECTIONS.TempEmpanelment }, providerName: String, incrementalId: String, pincodeId: { type: mongoose_1.Schema.Types.ObjectId, ref: constants_1.COLLECTIONS.Pincode }, pincode: String, state: String, city: String, zone: String, addressLineOne: String, addressLineTwo: String, landmark: String, telephone: String, website: String, fax: String, longitude: String, latitude: String, googlePlusCode: String, primaryContactName: String, primaryContactEmail: String, secondaryContactName: String, secondaryContactEmail: String, isDelist: { type: Boolean, default: false }, ownershipTypeId: mongoose_1.Schema.Types.ObjectId, ownershipName: String, cuin: String, panName: String, panNo: String, aadharName: String, aadharNo: String, officeAddressLineOne: String, officeAddressLineTwo: String, officeState: String, officeCity: String, officePincode: String, authorizedSignatoryName: String, authorizedSignatoryDesignation: String, authorizedSignatoryEmail: String, bankAccName: String, bankAccNo: String, bankAccIFSC: String, bankName: String, bankBranch: String, bankAccType: String, bankBranchCity: String, documents: mongoose_1.Schema.Types.Mixed, delistBy: { type: mongoose_1.Schema.Types.ObjectId, ref: constants_1.COLLECTIONS.User } }, constants_1.commonDbFields), constants_1.schemaOptions);
const Provider = (0, mongoose_1.model)('Provider', ProviderSchema, constants_1.COLLECTIONS.Provider);
exports.default = Provider;
